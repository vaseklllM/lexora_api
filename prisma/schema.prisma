// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  accounts  Account[]
  folders   Folder[]
  decks     Deck[]
  cards     Card[]
}

enum AccountProvider {
  google
  credentials
}

enum AccountType {
  oauth
  credentials
}

model Account {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider  AccountProvider
  providerAccountId String?
  type      AccountType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  passwordHash String?

  @@unique([provider, providerAccountId])
}

model Language {
  code               String  @id @default(uuid())   
  name               String
  nativeName         String
  iconSymbol         String
  decksWhatIKnow     Deck[] @relation("LanguageWhatIKnow")
  decksWhatILearn    Deck[] @relation("LanguageWhatILearn")
}


model Folder {
  id        String   @id @default(uuid())
  name      String  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Self-reference for hierarchical structure
  parentId  String?  
  parent    Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children  Folder[] @relation("FolderHierarchy")
  decks     Deck[]
}


model Deck {
  id                      String   @id @default(uuid())
  name                    String
  createdAt               DateTime @default(now())
  userId                  String
  user                    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  folderId                String?
  folder                  Folder?   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  languageWhatIKnowCode   String 
  languageWhatIKnow       Language @relation("LanguageWhatIKnow",fields: [languageWhatIKnowCode], references: [code])
  languageWhatILearnCode  String 
  languageWhatILearn      Language @relation("LanguageWhatILearn",fields: [languageWhatILearnCode], references: [code])
  cards                   Card[]
}

model Card {
  id                              String   @id @default(uuid())
  textInKnownLanguage             String  
  textInLearningLanguage          String  
  descriptionInKnownLanguage      String?  
  descriptionInLearningLanguage   String?  
  masteryScore                    Int @default(0) 
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt
  deckId                          String
  deck                            Deck     @relation(fields: [deckId], references: [id], onDelete: Cascade)
  userId                          String
  user                            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  isNew                           Boolean @default(true)
  lastReviewedAt                  DateTime @default(now())
  nativeSoundUrls                 String[] 
}